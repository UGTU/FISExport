//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18033
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EGECheckUnitTestProject.FCTServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FCTServiceReference.IEgeCheckService")]
    public interface IEgeCheckService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEgeCheckService/GetSingleCheckQuerySample", ReplyAction="http://tempuri.org/IEgeCheckService/GetSingleCheckQuerySampleResponse")]
        string GetSingleCheckQuerySample();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEgeCheckService/GetSingleCheckQuerySample", ReplyAction="http://tempuri.org/IEgeCheckService/GetSingleCheckQuerySampleResponse")]
        System.Threading.Tasks.Task<string> GetSingleCheckQuerySampleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEgeCheckService/GetBatchCheckQuerySample", ReplyAction="http://tempuri.org/IEgeCheckService/GetBatchCheckQuerySampleResponse")]
        string GetBatchCheckQuerySample();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEgeCheckService/GetBatchCheckQuerySample", ReplyAction="http://tempuri.org/IEgeCheckService/GetBatchCheckQuerySampleResponse")]
        System.Threading.Tasks.Task<string> GetBatchCheckQuerySampleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEgeCheckService/SingleCheck", ReplyAction="http://tempuri.org/IEgeCheckService/SingleCheckResponse")]
        string SingleCheck(string lastname, string firstname, string patronymicname, string passportseria, string passportnumber, string certificatenumber, string typographicnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEgeCheckService/SingleCheck", ReplyAction="http://tempuri.org/IEgeCheckService/SingleCheckResponse")]
        System.Threading.Tasks.Task<string> SingleCheckAsync(string lastname, string firstname, string patronymicname, string passportseria, string passportnumber, string certificatenumber, string typographicnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEgeCheckService/SingleCheckTest", ReplyAction="http://tempuri.org/IEgeCheckService/SingleCheckTestResponse")]
        string SingleCheckTest(string lastname, string firstname, string patronymicname, string passportseria, string passportnumber, string certificatenumber, string typographicnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEgeCheckService/SingleCheckTest", ReplyAction="http://tempuri.org/IEgeCheckService/SingleCheckTestResponse")]
        System.Threading.Tasks.Task<string> SingleCheckTestAsync(string lastname, string firstname, string patronymicname, string passportseria, string passportnumber, string certificatenumber, string typographicnumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEgeCheckServiceChannel : EGECheckUnitTestProject.FCTServiceReference.IEgeCheckService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EgeCheckServiceClient : System.ServiceModel.ClientBase<EGECheckUnitTestProject.FCTServiceReference.IEgeCheckService>, EGECheckUnitTestProject.FCTServiceReference.IEgeCheckService {
        
        public EgeCheckServiceClient() {
        }
        
        public EgeCheckServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EgeCheckServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EgeCheckServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EgeCheckServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetSingleCheckQuerySample() {
            return base.Channel.GetSingleCheckQuerySample();
        }
        
        public System.Threading.Tasks.Task<string> GetSingleCheckQuerySampleAsync() {
            return base.Channel.GetSingleCheckQuerySampleAsync();
        }
        
        public string GetBatchCheckQuerySample() {
            return base.Channel.GetBatchCheckQuerySample();
        }
        
        public System.Threading.Tasks.Task<string> GetBatchCheckQuerySampleAsync() {
            return base.Channel.GetBatchCheckQuerySampleAsync();
        }
        
        public string SingleCheck(string lastname, string firstname, string patronymicname, string passportseria, string passportnumber, string certificatenumber, string typographicnumber) {
            return base.Channel.SingleCheck(lastname, firstname, patronymicname, passportseria, passportnumber, certificatenumber, typographicnumber);
        }
        
        public System.Threading.Tasks.Task<string> SingleCheckAsync(string lastname, string firstname, string patronymicname, string passportseria, string passportnumber, string certificatenumber, string typographicnumber) {
            return base.Channel.SingleCheckAsync(lastname, firstname, patronymicname, passportseria, passportnumber, certificatenumber, typographicnumber);
        }
        
        public string SingleCheckTest(string lastname, string firstname, string patronymicname, string passportseria, string passportnumber, string certificatenumber, string typographicnumber) {
            return base.Channel.SingleCheckTest(lastname, firstname, patronymicname, passportseria, passportnumber, certificatenumber, typographicnumber);
        }
        
        public System.Threading.Tasks.Task<string> SingleCheckTestAsync(string lastname, string firstname, string patronymicname, string passportseria, string passportnumber, string certificatenumber, string typographicnumber) {
            return base.Channel.SingleCheckTestAsync(lastname, firstname, patronymicname, passportseria, passportnumber, certificatenumber, typographicnumber);
        }
    }
}
